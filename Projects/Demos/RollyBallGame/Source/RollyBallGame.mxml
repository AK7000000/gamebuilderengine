<?xml version="1.0" encoding="utf-8"?>
<!--
/*******************************************************************************
 * PushButton Engine
 * Copyright (C) 2009 PushButton Labs, LLC
 * For more information see http://www.pushbuttonengine.com
 * 
 * This file is property of PushButton Labs, LLC and NOT under the MIT license.
 ******************************************************************************/
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*" xmlns:ui="PBLabs.Rendering2D.UI.*" 
   layout="absolute" frameRate="60" width="640" height="480" applicationComplete="_OnLoaded()"
   activate="application1_activateHandler(event)" deactivate="application1_deactivateHandler(event)"
    backgroundColor="#000000" backgroundGradientColors="[0,0]">
   <mx:Style source="Style.css"/>
   
   <ui:FlexSceneView name="MainView" bottom="0" top="0" left="0" right="0"/>
   <mx:Label x="470" y="13" text="Score: 999999" id="lblScore"/>
   <mx:Label x="480" y="40" text="Time: 999999" id="lblTime"/>
   
   <local:Levels/>
   <local:Components/>
   <local:Resources/>
   <mx:Script>
      <![CDATA[
         import PBLabs.Engine.Core.*;
         import PBLabs.RollyGame.*;
         import mx.controls.Alert;
         
         public var CurrentScore:Number = 0;
         public var StartTimer:Number = 0;
         public var CurrentTime:Number = 60.0;
         public var LevelDuration:Number = 10000;
         
         public function AddPoints(amount:Number):void
         {
            CurrentScore += amount;
            lblScore.text = "Score: " + CurrentScore;
         }
         
         private function _OnLoaded():void
         {
            // Initialize level and score.
            Global.MainClass = this;
            LevelManager.Instance.Start();
            AddPoints(0);
            
            // Set up the game timer.
            StartTimer = ProcessManager.Instance.VirtualTime;
            setInterval(_UpdateTimer, 10);
            
            // Make the game scale properly.
            Application.application.stage.scaleMode = StageScaleMode.SHOW_ALL; 
         }
         
         private function _UpdateTimer():void
         {
            stage.focus = stage;

            CurrentTime = LevelDuration - (ProcessManager.Instance.VirtualTime - StartTimer);
            
            if(CurrentTime >= 0)
               lblTime.text = "Time: " + (CurrentTime/1000).toFixed(2);
            else
               lblTime.text = "Time: 0.00";
            
            if(CurrentTime <= 0 && ProcessManager.Instance.IsTicking)
            {
               // Stop playing!
               ProcessManager.Instance.Stop();
               
               // Kick off the scoreboard.
               var sb:Scoreboard = new Scoreboard();
               addChild(sb);
               sb.StartReport(CurrentScore);
            }
         }
         
         public function ResetLevel():void
         {
            // Reset the level.
            LevelManager.Instance.UnloadCurrentLevel();
            LevelManager.Instance.LoadLevel(LevelManager.Instance.CurrentLevel);
            
            // Reset the timer and score.
            StartTimer = ProcessManager.Instance.VirtualTime;
            AddPoints(-CurrentScore);
         }
         
         public function RestartGame():void
         {
            // Reset the level.
            LevelManager.Instance.UnloadCurrentLevel();
            LevelManager.Instance.LoadLevel(0);
            
            // Reset the timer and score.
            StartTimer = ProcessManager.Instance.VirtualTime;
            AddPoints(-CurrentScore);
         }
         
         public function NextLevel():void
         {
            if(LevelManager.Instance.CurrentLevel < 1)
            {
               LevelManager.Instance.UnloadCurrentLevel();
               LevelManager.Instance.LoadNextLevel();               

               // Reset the timer.
               StartTimer = ProcessManager.Instance.VirtualTime;
	           ProcessManager.Instance.Start();
               AddPoints(-CurrentScore);
            }
            else
            {
            	addChild(new GameOver());
            }
         }

         protected function application1_activateHandler(event:Event):void
         {
            ProcessManager.Instance.Start();
         }

         protected function application1_deactivateHandler(event:Event):void
         {
            ProcessManager.Instance.Stop();
         }

      ]]>
   </mx:Script>
</mx:Application>