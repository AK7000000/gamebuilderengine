<!-- 

   Welcome to the PushButton Engine Ant build file.
   
   If you are building your own application you probably just need the SWC
   or else you need to copy the src/ folder's contents into your project.
   
   If you are a more advanced user or a PBEngine SDK developer, then this file
   will be of interest to you. :)
   
   This file is based on the PaperVision3D Ant build file, subsequently modified
   to fit PBEngine.
   
   How to use the build.properties file:

    Your checkout should include a build.template.properties file. This is where
    variables that change from system to system are stored. Simply rename the file
    to build.properties and place it in the same directory as your build.xml. When 
    you run the build.xml it will automatically import the build.properties file.

    Make sure you change the path of the Flex SDK and if you are on a PC you will need
    to add ".exe" to the asdoc.exe and compc.exe properties.
    
    NOTE: There is a bug with the 3.4.0 SDK that ships with the Flash Builder 4 Beta.
    Basically ASDoc doesn't work in our situation. Use the release version of the SDK 
    or the 4.0 version and the build will work.
    http://bugs.adobe.com/jira/browse/SDK-20449
    
-->
<project name="PBEngineSDK" default="compile" basedir=".">
   <dirname property="buildFilesDir" file="${ant.file.PBEngineSDK}" />
   <dirname property="rootDir" file="${buildFilesDir}" />
   
   <!-- import our build properties file -->
   <property file="${buildFilesDir}/build.properties" />

   <!-- Build settings -->
   <property name="DEBUG" value="false"/>
   
   <!-- Docs appearance settings. -->
   <property name="windowtitle" value="PushButton Engine Documentation" />
   <property name="maintitle" value="PushButton Engine Documentation" />
   <property name="footer" value="http://pushbuttonengine.com/" />

    <!-- Paths for the PBEngine SDK. -->
   <property name="bindir" value="${rootDir}/bin" />
   <property name="classesdir" value="${rootDir}/src" />
   <property name="docsdir" value="${rootDir}/docs/api" />
   <property name="testsdir" value="${rootDir}/test" />

  <!-- Infer the binary extensions. -->
   <condition property="binaryExtension" value=".exe" else="">
      <or>
         <os family="windows"/>
         <os family="win9x"/>
         <os family="dos"/>
      </or>
   </condition>

    <!-- Paths for the Flex SDK. -->
   <property name="flex3bindir" value="${flex3dir}/bin" />
   <property name="flex3libsdir" value="${flex3dir}/frameworks/libs" />
   <property name="asdoc" value="${flex3bindir}/asdoc${binaryExtension}" />
   <property name="compc" value="${flex3bindir}/compc${binaryExtension}" />
   <property name="mxmlc" value="${flex3bindir}/mxmlc${binaryExtension}" />

   <!-- Local classpath useed for custom tasks -->
   <path id="localClasspath">
      <fileset dir="${buildFilesDir}">
         <include name="**/*.jar"/>
      </fileset>
   </path>

   <target name="ensureValidEnvironment">
      <condition property="buildPropertiesIsValid">
         <available file="${buildFilesDir}/build.properties"/>
      </condition>
      <fail unless="buildPropertiesIsValid">
         No ${buildFilesDir}/build.properties file is present!
         
         Copy build/build.template.properties to build/build.properties and
         set the values in it appropriate to your build environment.
      </fail>
      <condition property="flexSdkIsValid"> 
         <and> 
           <isset property="flex3dir"/> 
           <available file="${flex3dir}"/> 
         </and> 
       </condition>
    <fail unless="flexSdkIsValid">Either flex3dir is not set, or it points to an absent directory.
      
      flex3dir appears to be set to: '${flex3dir}'
    
      Set the flex3dir parameter by editing the build.properties file.
    </fail> 
   </target>

   <target name="compile" description="Creates SWC and API docs." unless="isUpToDate" depends="printUpToDate,ensureValidEnvironment">
       <antcall target="generateSWC" />
      <antcall target="generateDocs" />
   </target>
   
   <target name="clean" description="Delete build artifacts." depends="cleanDocs">
      <delete file="${bindir}/PBEngine.swc"/>
   </target>

   <target name="identifyClasses" description="Generates list of classes that will be compiled." depends="ensureValidEnvironment">
      <path id="path.source">
         <fileset dir="${classesdir}" includes="**/*.as,**/*.mxml"/>
      </path>
      <pathconvert property="path.classes" refid="path.source" pathsep=" ">
         <chainedmapper>
            <globmapper from="${classesdir}/*" to="*" casesensitive="false" handledirsep="true"/>
            <mapper type="regexp" from="^com[/\\]pblabs(.*)\.((mxml)|(as))" to="com\\pblabs\1"/>
            <mapper type="package" from="*" to="*"/>
         </chainedmapper>
      </pathconvert>
   </target>

   <target name="cleanDocs" description="Clean the documentation directory.">
      <echo>Cleaning out docs from '${docsdir}'...</echo>
      <delete includeemptydirs="true" quiet="true">
         <fileset dir="${docsdir}" includes="**/*"></fileset>
      </delete>
   </target>

   <target name="generateDocs" description="Generates docs" depends="cleanDocs,identifyClasses">
      <echo>Generating documentation for '${docsdir}'...</echo>
      <exec executable="${asdoc}" failonerror="true">
         <arg line="-source-path &quot;${classesdir}&quot;" />
         <arg line="-doc-classes ${path.classes}" />
         <arg line="-exclude-dependencies=true" />
         <arg line="-window-title '${windowtitle}'" />
         <arg line="-main-title '${maintitle}'" />
         <arg line="-footer '${footer}'" />
         <arg line="-output '${docsdir}'" />
      </exec>
   </target>

   <target name="checkSWCUpToDate" depends="ensureValidEnvironment">
      <uptodate property="isUpToDate" targetfile="${bindir}/PBEngine.swc">
         <srcfiles dir="${classesdir}">
            <include name="**/*.as"/>
            <include name="**/*.mxml"/>
         </srcfiles>
      </uptodate>
   </target>

   <target name="printUpToDate" depends="checkSWCUpToDate" if="isUpToDate">
      <echo>PBEngine.swc is up to date, skipping.</echo>
   </target>

   <target name="generateSWC" description="Generates PBEngine SWC." unless="isUpToDate" depends="printUpToDate,identifyClasses">
      <echo>Generating PBEngine.SWC using '${classesdir}'</echo>
      <exec executable="${compc}" failonerror="true">
         <arg line="-source-path &quot;${classesdir}&quot;" />
         <arg line="-output &quot;${bindir}/PBEngine.swc&quot;" />
         <arg line="-include-classes ${path.classes}" />
         <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed,ResourceType" />
         <arg line="-debug=${DEBUG}"/>
      </exec>
   </target>
   
   <target name="lessons" depends="compile" description="Compile all the lessons.">
      <ant dir="${rootDir}/lessons/Lesson2Base"/>
      <ant dir="${rootDir}/lessons/Lesson2Final"/>
      <ant dir="${rootDir}/lessons/Lesson3Base"/>
      <ant dir="${rootDir}/lessons/Lesson3Final"/>
      <ant dir="${rootDir}/lessons/Lesson4Base"/>
      <ant dir="${rootDir}/lessons/Lesson4Final"/>
      <ant dir="${rootDir}/lessons/Lesson5Base"/>
      <ant dir="${rootDir}/lessons/Lesson5Final"/>
   </target>
   
   <target name="examples" depends="compile" description="Compile all the examples.">
      <ant dir="${rootDir}/examples/PBEngineDemo"/>
      <ant dir="${rootDir}/examples/PBFlexlessEngineDemo"/>
      <ant dir="${rootDir}/examples/RollyBallGame"/>
   </target>
   
   <target name="doFullPackagedBuild" description="Build a packaged ZIP of the whole SDK, ready for distribution." depends="clean,compile,lessons,examples">
      <!-- Build everything from scratch - dependencies do this. -->
      
      <!-- Get the current revision. -->
      <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="localClasspath" />
      <svn>
         <status path="." revisionProperty="svn.revision"/>
      </svn>
      <echo>Packaging version ${svn.revision} of PBEngine SDK from repo</echo>
      
      <!-- Package it all into a zip with appropriate name. -->
      <delete file="${rootDir}/PushButtonEngine-r${svn.revision}.zip" quiet="true"/>
      <zip destfile="${rootDir}/PushButtonEngine-r${svn.revision}.zip" level="9" basedir="${rootDir}" excludes="*svn*,PushButtonEngine-r*.zip"/>
   </target>
   
   <target name="buildSWF" description="Build a SWF for a project given a few properties. Used by per-project Ant files." depends="generateSWC">
      <!--
         We expect a few properties.
         
         currentProject.rootDir - root directory (like examples/PBEngineDemo).
         currentProject.name    - name of current project.
         currentProject.rootFile - .as or .mxml file that is entry point.
      -->
      <echo>Building ${currentProjectName} in ${currentProjectRootDir} from ${currentProjectRootFile}</echo>
      <exec executable="${mxmlc}" failonerror="true">
         <arg line="-source-path+=&quot;${currentProjectRootDir}/src&quot; " />
         <arg line="-library-path+=&quot;${buildFilesDir}/../bin&quot;" />
         <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed" />
         <arg line="-compiler.optimize=true -use-network=false" />
         <arg line="-output &quot;${currentProjectRootDir}/bin/${currentProjectName}.swf&quot;" />
         <arg line="&quot;${currentProjectRootDir}/src/${currentProjectRootFile}&quot;" />
         <arg line="-debug=${DEBUG}"/>
      </exec>
   </target>

   <target name="test" description="Builds and runs the unit tests defined in the test directory." depends="generateSWC">
      <property name="testRunDir" value="${buildFilesDir}/testrun"></property>

      <mkdir dir="${testRunDir}"></mkdir>

      <exec executable="${mxmlc}" failonerror="true">
         <arg line="-source-path+=&quot;${testsdir}/src&quot; " />
         <arg line="-library-path+=&quot;${buildFilesDir}/../bin&quot;" />
         <arg line="-library-path+=&quot;${testsdir}/libs&quot;" />
         <arg line="--keep-as3-metadata+=TypeHint,EditorData,Embed,ResourceType" />
         <arg line="-compiler.optimize=true -use-network=false" />
         <arg line="-output &quot;${testRunDir}/pbetests.swf&quot;" />
         <arg line="&quot;${testsdir}/src/test.mxml&quot;" />
         <arg line="-debug=${DEBUG}"/>
      </exec>

   	  <echo>Tests located at "${testRunDir}/pbetests.swf"</echo>
      <echo />
   	  <echo>Soon this will run the tests in an AIR application.</echo>
   </target>

 </project>
